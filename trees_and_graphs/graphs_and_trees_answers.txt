1. What is a binary tree and what makes it unique to other trees?

Binary trees consist of root node at the top and sub-nodes that point to the child nodes. Binary trees have the similar  structure as other trees except, they can only have two branches for every node.


2. What is a heuristic?

Heuristics are guesses that an algorithm makes to solve complex problems by getting to needed results sooner while possibly sacrificing accuracy.


3. What is another problem besides the shortest-path problem that requires the use of heuristics?

The traveling salesman problem.


4. What is the difference between a depth-first search and a breadth-first search?

Dept-first search: searches by traveling down one single branch at the time to find an element, and then will move upward and repeat the search with unvisited nodes if the element is not found.
Breadth -first searches multiple nodes at once by searching an entire row of nodes traveling downward the root node.

5. Explain in your own words what an undirected, a-cyclic, unweighted graph is.

Undirected graph - has a two way connection that does not have an end or start.

A-cyclic graph - are graphs that do not form loops (such as linked lists and trees).

Unweighted graph - is a graph that does not have assigned cost or travel time.


6. What kind of graph is a binary search tree?

Binary tree is directed, a - cyclic, unweighted type of graph.


*****Programming Questions*****
1. Given a Binary Search Tree and a value, write a function that checks to see whether the value exists within the tree.

Example: The value 10 exists in the tree. The value 23 does not exist in the tree.

SET current data TO root node
 FUNCTION find()
 Implement a WHILE loop current.data !== data
  IF data < current.data
    current = current.left
 ELSE
    current = current.right
 IF current = null
    RETURN FALSE
 END FUNCTION

class Node {
  constructor(data, left = null, right = null) {
    this.data = data;
    this.left = left;
    this.right = right;
  }
}

class BST {
  constructor() {
    this.root = null;
  }
  add(data) {
    const node = this.root;
    if (node === null) {
      this.root = new Node(data);
      return;
    } else {
      const searchTree = function(node) {
        if (data < node.data) {
          if (node.left === null) {
            node.left = new Node(data);
            return;
          } else if (node.left !== null){
            return searchTree(node.left);
          }
        } else if (data > node.data) {
          if (node.right === null) {
            node.right = new Node(data);
            return;
          } else if (node.right !== null) {
            return searchTree(node.right);
          }
        } else {
          return null;
        }
      };
      return searchTree(node);
    }
  }

  find(data) {
    let current = this.root;
    while (current) {
      if (data === current.data){
        return true;
      } if (data < current.data) {
        current = current.left;
      } else {
        current = current.right;
      }
    }
    return false;
  }
}

const bst = new BST();
bst.add(8)
bst.add(3)
bst.add(10)
bst.add(1)
bst.add(6)
bst.add(14)
bst.add(4)
bst.add(7)
bst.add(13)
console.log(bst);
console.log(bst.find(10));
console.log(bst.find(5));
console.log(bst.find(8));

2. Given a Binary Search Tree and two nodes, n1 and n2, write a function that finds the distance between the two nodes.

Example: The distance between the nodes 4 and 10 is 4. The distance between the nodes 8 and 10 is 1. The distance between the nodes 1 and 14 is 4.

Find the lowest common ancestor
Get the distance from the lowest common ancestor to n1
Get the distance from the lowest common ancestor to n2
return the combined distance

getCommonAncestor(n1, n2) {
    let current = this.root;
    while (current) {
      if (n1 < current.data && n2 < current.data) {
        current = current.left;
      } else if (n1 > current.data && n2 > current.data) {
        current = current.right;
      } else {
        return current;
      }
    }
  }


  getDistance(node, n) {
    let current = node;
    let count = 0;

    while (current) {
      if (n === current.data) {
        break;
      }
      if (n < current.data) {
        current = current.left;
      } else {
        current = current.right;
      }
      count++;
    }
    return count;
  }

  getDistanceBetween(n1, n2) {
    const commonAncestor = this.getCommonAncestor(n1, n2);
    const n1Dist = this.getDistance(commonAncestor, n1);
    const n2Dist = this.getDistance(commonAncestor, n2);
    return n1Dist + n2Dist;
  }